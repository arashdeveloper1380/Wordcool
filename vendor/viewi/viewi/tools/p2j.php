<?php

// php tools/p2j.php
// regex for replacing same names: \s+(var|let|const)\s+([a-zA-Z_]+)\s*=\s+\2(\n|\s)
$path = __DIR__ . '/../../../locutus-master\locutus-master\src\php';
$target = __DIR__ . '/../src/Viewi/JsFunctions/Functions';
$namespace = 'Viewi\JsFunctions\Functions';
$exportMark = '// ##autogenerated';
$exportFile = __DIR__ . '/../src/Viewi/JsFunctions/export.php';
$watchLatestCode = PHP_EOL . '        $translator->activateReactivity([null, "\'pop\'"]);';


echo 'Starting building js for php' . PHP_EOL;

$template = file_get_contents(__DIR__ . '/p2j.template');
$builder = new PHP2JsBuilder();
$files = $builder->getDirContents($path);

echo 'Found ' . count($files) . ' files' . PHP_EOL;

$exportContent = file_get_contents($exportFile);
$exportContentParts = explode($exportMark, $exportContent);
$exportContent = $exportContentParts[0] . $exportMark . PHP_EOL;

foreach ($files as $fileName => $poof) {
    $parts = explode('\\', $fileName);
    $pathInfo = pathinfo($fileName);
    $function = $pathInfo['filename'];
    if ($function === 'index') {
        echo "Skipping.. $function" . PHP_EOL;
        continue;
    }
    $baseName = $pathInfo['basename'];
    $extension = $pathInfo['extension'];
    $dir = ucfirst($parts[count($parts) - 2]);
    if ($dir === 'Array') {
        $dir = 'Arrays';
    }
    if ($dir === 'Var') {
        $dir = 'Vars';
    }
    $dir = str_replace('-', '', $dir);
    $class = $builder->pascalToCamelCase($pathInfo['filename']);
    if (in_array($class, ['Echo', 'StrSplit', 'Htmlentities', 'CtypeAlnum', 'CtypeSpace', 'CtypeUpper'])) {
        echo "Skipping.. $function" . PHP_EOL;
        continue;
    }
    if ($class === 'Echo' || $class === 'Empty' || $class === 'Isset') {
        $class .= 'PHP';
    }

    $watchLatest = in_array($function, ['array_pop', '']);

    $targetNamespace = $namespace . '\\' . $dir;

    $targetDir = $target . '/' . $dir;
    $targetFilePHP = $targetDir . '/' . $class . '.php';
    $targetFileJS = $targetDir . '/' . $class . '.js';


    echo "Converting $targetNamespace $class for $function in $dir/$baseName" . PHP_EOL;
    echo "Saving to $targetFilePHP" . PHP_EOL;
    if (!file_exists($targetDir)) {
        mkdir($targetDir, 0777, true);
    }
    $jsContent = file_get_contents($fileName);
    // remove unnecessary things
    $jsContent = preg_replace('/(?:(?:\/\*(?:[^*]|(?:\*+[^*\/]))*\*+\/)|(?:(?<!\:|\\\|\'|\")\/\/.*))/', '', $jsContent);
    $jsContent = preg_replace('/\n\s*\n/', PHP_EOL, $jsContent);
    $jsContent = preg_replace('/module.exports\s*=\s*/', '', $jsContent);
    // $jsContent = preg_replace('/[^\n\r]*require\([^\n\r]*/', '', $jsContent);
    // dependencies

    $matches = [];
    // preg_match("/[^\n\r]*require\([^\n\r']*('|\")([/\w.]+)[^\n\r]*/", $jsContent, $matches);
    $dependencies = '';
    preg_match_all("/.*(?<assignment>=\s*require\((?<path>[^)]*)('|\").*)/", $jsContent, $matches);
    if (isset($matches['assignment'])) {
        foreach ($matches['assignment'] as $index => $assignment) {
            $path = explode('/', $matches['path'][$index]);
            $replacementName = $path[count($path) - 1];
            $replacementName = str_replace(['"', "'"], '', $replacementName);
            $replacementCode = "= window.$replacementName";
            echo "Replacing $replacementName in $fileName.." . PHP_EOL;
            if ($replacementName === 'echo') {
                $replacementCode = "= console.log";
                $jsContent = str_replace($assignment, $replacementCode, $jsContent);
                continue;
            }
            $jsContent = str_replace($assignment, $replacementCode, $jsContent);
            $dependencies .= "        \$translator->includeFunction('$replacementName');" . PHP_EOL;
        }
    }
    $content = $template;
    $content = str_replace('##namespace##', $targetNamespace, $content);
    $content = str_replace('##class##', $class, $content);
    $content = str_replace('##function##', $function, $content);
    $content = str_replace('##watchLatest##', $watchLatest ? $watchLatestCode : '', $content);
    $content = str_replace('##dependencies##', $dependencies, $content);
    file_put_contents($targetFilePHP, $content);
    file_put_contents($targetFileJS, $jsContent);
    $exportContent .= "require 'Functions/$dir/$class.php';" . PHP_EOL;
}

file_put_contents($exportFile, $exportContent);

class PHP2JsBuilder
{

    function getDirContents($dir, &$results = array())
    {
        $files = scandir($dir);

        foreach ($files as $key => $value) {
            $path = realpath($dir . DIRECTORY_SEPARATOR . $value);
            if (!is_dir($path)) {
                $results[$path] = true;
            } else if ($value != "." && $value != "..") {
                $this->getDirContents($path, $results);
            }
        }

        return $results;
    }

    function pascalToCamelCase($string, $capitalizeFirstCharacter = true)
    {

        $str = str_replace('_', '', ucwords($string, '_'));

        if (!$capitalizeFirstCharacter) {
            $str = lcfirst($str);
        }

        return $str;
    }
}
